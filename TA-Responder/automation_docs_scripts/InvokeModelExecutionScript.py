"""This is the main Python script used by the 'TaResponderAutomationDocumentInvokeModel' SSM Automation document to get recommendations for TA check findings"""

import json

import boto3


def get_trusted_advisor_check(check_name):
    # boto3 client for Trusted Advisor
    client = boto3.client("trustedadvisor")

    paginator = client.get_paginator("list_checks")

    # Initialize an empty list to store all check summaries
    all_check_summaries = []

    # Paginate through all results
    for page in paginator.paginate():
        all_check_summaries.extend(page["checkSummaries"])

    # Find the check summary that matches the provided name
    matching_check = next(
        (check for check in all_check_summaries if check["name"] == check_name), None
    )

    return matching_check


def array_to_string(arr):
    if len(arr) == 0:
        return ""
    elif len(arr) == 1:
        return arr[0]
    elif len(arr) == 2:
        return f"{arr[0]} and {arr[1]}"
    else:
        return ", ".join(arr[:-1]) + f", and {arr[-1]}"


def invoke_bedrock_and_extract(
    affected_resource_arn, check_name, model_id, check_details
):
    bedrock_runtime = boto3.client("bedrock-runtime")

    related_aws_services = array_to_string(check_details.get("awsServices", []))

    related_pillars = array_to_string(check_details.get("pillars", []))

    check_description = check_details.get("description", [])

    system_prompt = f"""You are an AWS Cloud Solutions Architect who specializes in the AWS Well-Architected Framework, and in running a process called the Well-Architected Framework Review (WAFR). The WAFR process consists of evaluating a cloud workload against the 6 pillars of the Well-Architected Framework, namely - Operational Excellence Pillar, Security Pillar, Reliability Pillar, Performance Efficiency Pillar, Cost Optimization Pillar, and Sustainability Pillar - all of this in order to establish good architectural habits, manage and eliminate risk and increase the adoption of best practices.
    
    You are also a subject matter expert in the {related_aws_services} AWS services, and have experience in troubleshooting and resolving complex technical problems on these services. You are able to review findings from AWS Trusted Advisor checks, and suggest possible root cause and solutions for the issues found.
    
    Follow the instructions listed under "instructions" section below.

    <instructions>
    1) In the <check_name> section, you are provided with the name of a specific Trusted Advisor Check related to the {related_pillars} pillar(s), which has found a resource to be not compliance with its evaluation (e.g. the resource was flagged as either Red or Yellow by the check evaluation).
    2) In the <check_description> section, you are provided with more details about this Trusted Advisor Check. This <check_description> section contains a description about what this check is evaluating, it details the "Alert Criteria" used by this check to evaluate whether a resource is flagged as either Red/Yellow/Green, and it also provides with "Recommended Action" information and "Additional Resources" with useful links.
    3) In the <affected_resource_arn> section, you are provided with the ARN or unique identifier of the resource that was flagged by the Trusted Advisor Check. This is the resource that needs to be remediated.
    4) In alignment with the Trusted Advisor Check and related AWS Well-Architected Framework best practices, provide recommendations on how to fix the issue identified by the Trusted Advisor Check.
    5) When possible, provide with step by step instruction on how to fix the issue. Also, when applicable, include AWS CLI commands that can be used to fix the issue (this should be tailored to the specific resource identified in the <affected_resource_arn> section).
    6) Finally, make sure to include a disclaimer at the beginning of your response, stating that it was generated by a Gen AI model.
    </instructions>
    """

    prompt = f"""
    <check_name>
    {check_name}
    </check_name>

    <check_description>
    {check_description}
    </check_description>

    <affected_resource_arn>
    {affected_resource_arn}
    </affected_resource_arn>
    """

    body = json.dumps(
        {
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 2000,
            "temperature": 0.5,
            "system": system_prompt,
            "messages": [
                {"role": "user", "content": [{"type": "text", "text": prompt}]}
            ],
        }
    )

    response = bedrock_runtime.invoke_model(
        body=body,
        modelId=model_id,
        accept="application/json",
        contentType="application/json",
    )

    response_body = json.loads(response["body"].read())
    answer = response_body["content"][0]["text"]

    return {"Answer": answer}


def handler(events, context):
    affected_resource_arn = events["affectedResourceArn"]
    check_name = events["checkName"]
    model_id = events["modelId"]

    # Get the Trusted Advisor check details
    check_details = get_trusted_advisor_check(check_name)

    # Invoke the Bedrock model and get the response
    model_response = invoke_bedrock_and_extract(
        affected_resource_arn, check_name, model_id, check_details
    )

    # Return the model response
    return model_response
